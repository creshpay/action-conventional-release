name: "Create git release with conventional changelog"

description: This action create a nice and clean github release leveraging git conventional commit best practices

branding:
  icon: "code"
  color: "purple"

inputs:
  custom-tag:
    description: "Optional tag for new release"
    required: false

  base-branch:
    description: "Base branch to merge on"
    required: false
    default: "main"

  github-access-token:
    description: "Github access token"
    required: true

  github-access-token-reviewer:
    description: "Github access token for a reviewer"
    required: true

  delete-release-branch:
    description: "Trigger deletion of release branch"
    required: false
    default: "0"

runs:
  using: "composite"
  steps:
    - name: Install NPM Packages
      shell: bash
      run: npm i -g standard-version@9.3.1 extract-changelog-release@1.0.2

    - name: Generate tag and changelog
      shell: bash
      id: generate-changelog
      run: |
        git checkout -B release/${GITHUB_SHA}
        if [ "${{ inputs.custom-tag }}" == "" ]; then
          npx standard-version --no-verify
        else
          npx standard-version --no-verify --release-as ${{ inputs.custom-tag }}
        fi
        TAG=$(git describe --tags)
        echo "::set-output name=TAG::$TAG"

    - name: Create release branch
      shell: bash
      run: |
        git branch -M release/${{ steps.generate-changelog.outputs.TAG }}
        git push --set-upstream origin HEAD:release/${{ steps.generate-changelog.outputs.TAG }}

    - name: Create a merge PR for release, authenticated as machine user
      shell: bash
      run: |
        echo ${{ inputs.github-access-token }} | gh auth login --with-token
        gh pr create -a @me -t "Create new release ${{ steps.generate-changelog.outputs.TAG }}" -f -B ${{ inputs.base-branch }}

    - name: Wait until the PR is created
      shell: bash
      run: |
        while true; do
          N=$(gh pr list -H release/${{ steps.generate-changelog.outputs.TAG }} --json id -q '.[].id' | wc -l)
          if [ $N -gt 0 ]; then
              break
          fi
          sleep 1
        done

    - name: Approve the PR so PR merge checks are OK, authenticated as reviewer
      shell: bash
      run: |
        echo ${{ inputs.github-access-token-reviewer }} | gh auth login --with-token
        gh pr review --approve

    - name: Sleep for 5 seconds so PR can be merged successfully
      shell: bash
      run: sleep 5s

    - name: Merge the approved PR, authenticated as machine user
      shell: bash
      run: |
        echo ${{ inputs.github-access-token }} | gh auth login --with-token
        gh pr merge release/${{ steps.generate-changelog.outputs.TAG }} -s

    - name: Clean and push tag
      shell: bash
      run: |
        git fetch
        git checkout ${{ inputs.base-branch }}
        git rebase origin/${{ inputs.base-branch }}
        if [[ "${{ inputs.delete-release-branch }}" != "0" ]]; then
          git branch -D release/${{ steps.generate-changelog.outputs.TAG }}
          EXISTS=$(git ls-remote 2>/dev/null | grep release/${{ steps.generate-changelog.outputs.TAG }} | wc -l)
          if [[ "$EXISTS" != "0" ]]; then
            git push origin :release/${{ steps.generate-changelog.outputs.TAG }}
          fi
        fi
        TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ steps.generate-changelog.outputs.TAG }})
        git tag -d ${{ steps.generate-changelog.outputs.TAG }}
        git tag -m "${TAG_MESSAGE}" "${{ steps.generate-changelog.outputs.TAG }}"
        git push --follow-tags

    - name: Extract changelog release
      shell: bash
      run: |
        npx extract-changelog-release > RELEASE_BODY.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-access-token }}
      with:
        tag_name: ${{ steps.generate-changelog.outputs.TAG }}
        release_name: ${{ steps.generate-changelog.outputs.TAG }}
        body_path: RELEASE_BODY.md
        draft: false
        prerelease: false
